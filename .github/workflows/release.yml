name: CMake RELEASE

on:
  push:
    tags:
      - 'v*.*.*'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  cmake-release:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    permissions: write-all
    #  packages: write
    #  contents: write
    env:
      PACKAGE: DEB
      PACKAGE_CONTENT_TYPE: "application/vnd.debian.binary-package"
      BUILD_TESTING: ON
      CXX_FLAGS: "-g -O2 -fsanitize=undefined -fsanitize=address -fsanitize=leak -fno-omit-frame-pointer" # --profiling-output ./profiling_dc.json --profiling-format=google-trace

    steps:
    # pre
    - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
    - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
    - run: uname -a    
    - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
    - name: Check initial GCC version
      run: gcc -v
    - name: Install GCC v13
      uses: egor-tensin/setup-gcc@v1
      with:
        version: 13
    - name: Check installed GCC version
      run: gcc -v
      
    - name: Install Google Test
      run: sudo apt-get update && sudo apt-get install libgtest-dev -y

    - name: Install Boost Components
      run: sudo apt-get install libboost-program-options-dev libboost-system-dev libboost-log-dev -y
      
    - name: Install gcovr
      run: sudo apt-get -y install gcovr
      
    - name: Check out repository code
      uses: actions/checkout@v3
      with:
        clean: false
        fetch-depth: 0
        submodules: true
    - run: git describe --tags --dirty
    - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."  
  
    - name: set env RELEASE_VERSION
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - name: print RELEASE_VERSION
      run: |
        echo $RELEASE_VERSION # test
        echo ${{ env.RELEASE_VERSION }} # test

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{github.workspace}}/build -S ${{github.workspace}} \
          -DRELEASE_VERSION="${{env.RELEASE_VERSION}}" \
          -DPACKAGE=${{env.PACKAGE}} \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DBUILD_TESTING=${{env.BUILD_TESTING}} \
          -DCMAKE_CXX_FLAGS="${{env.CXX_FLAGS}}"

    - name: Build
      run: sudo cmake --build "${{github.workspace}}/build"
    
    - name: Run unit tests
      working-directory: ${{github.workspace}}/build
      # Execute tests DEFAULT_VALUEined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest -C ${{env.BUILD_TYPE}}
      run: ctest -T Test --verbose

    # - name: Install
    #   run: sudo cmake --build "${{github.workspace}}/build" --target install

    # - name: Run app
    #   run: sparse_matrix

    - name: Generate package
      run: |
        sudo cmake --build ${{github.workspace}}/build --target package | tee cpack_report
        echo "PACKAGE_ABSOLUTE_NAME=`cat cpack_report | awk 'END{print}' | sed 's/.*- package: \(.*\) generated.$/\1/'`" >> $GITHUB_ENV

    - name: Extract package name
      run: echo "PACKAGE_BASE_NAME=`basename $PACKAGE_ABSOLUTE_NAME`" >> $GITHUB_ENV        

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "${{env.RELEASE_VERSION}}"
        release_name: Release "${{env.RELEASE_VERSION}}"
        draft: false
        prerelease: false

    - name: Upload Release (DEB) Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{env.PACKAGE_ABSOLUTE_NAME}}       
        asset_name: ${{env.PACKAGE_BASE_NAME}}
        asset_content_type: ${{env.PACKAGE_CONTENT_TYPE}}
    # todo: switch to new release module
    # - name: Release
    #   uses: softprops/action-gh-release@v1
    #   with:
    #     name: Release ${{env.RELEASE_VERSION}}
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     draft: false
    #     prerelease: false
    #     files: |
    #       Release.txt
    #       LICENSE
    #       ...

    - run: echo "üçè This job's status is ${{ job.status }}."
