find_package(Git REQUIRED) # required for now

# AUTHOR: git show -s --format="%an <%ae>"
# REPOSITORY: git config --get remote.origin.url
# BRANCH: git rev-parse --abbrev-ref HEAD 
# TAG: git describe --exact-match --tags
# REV: git log --pretty=format:'%h' -n 1
# COMMIT DATE: git show -s --format="%cd" --date=format:'%Y.%m.%d-%H:%M
# HIST: git for-each-ref --format='%(committerdate) %09 %(authorname) %09 %(refname)' | sort -k5n -k2M -k3n -k4n

# if(GIT_EXECUTABLE)
execute_process(
  COMMAND ${GIT_EXECUTABLE} show -s --format="%an <%ae>"
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_DESCRIBE_PROJECT_AUTHOR
  # ERROR_VARIABLE GIT_DESCRIBE_PROJECT_AUTHOR
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
execute_process(
  COMMAND ${GIT_EXECUTABLE} config --get remote.origin.url
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_DESCRIBE_PROJECT_REPOSITORY_URL
  # ERROR_VARIABLE GIT_DESCRIBE_PROJECT_REPOSITORY_URL
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
execute_process(
  COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_DESCRIBE_PROJECT_REPOSITORY_BRANCH
  # ERROR_VARIABLE GIT_DESCRIBE_PROJECT_REPOSITORY_BRANCH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
execute_process(
  COMMAND ${GIT_EXECUTABLE} log --pretty=format:"%h" -n 1
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_DESCRIBE_PROJECT_REVISION
  # ERROR_VARIABLE GIT_DESCRIBE_PROJECT_REVISION
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
execute_process(
  COMMAND ${GIT_EXECUTABLE} show -s --format="%cd" --date=format:%Y.%m.%d-%H:%M
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_DESCRIBE_PROJECT_REVISION_DATETIME
  # ERROR_VARIABLE GIT_DESCRIBE_PROJECT_REVISION_DATETIME
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
execute_process(
  COMMAND ${GIT_EXECUTABLE} for-each-ref "--format=%(committerdate) %09 %(authorname) %09 %(refname)"
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_DESCRIBE_PROJECT_REVISION_HISTORY
  # ERROR_VARIABLE GIT_DESCRIBE_PROJECT_REVISION_HISTORY
  OUTPUT_STRIP_TRAILING_WHITESPACE
  ENCODING UTF8
)
execute_process(
  COMMAND ${GIT_EXECUTABLE} describe --tags --dirty --match "v*"
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_DESCRIBE_VERSION
  RESULT_VARIABLE GIT_DESCRIBE_ERROR_CODE
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
if(NOT GIT_DESCRIBE_ERROR_CODE)
  set(GIT_DESCRIBE_PROJECT_VERSION_ASIS ${GIT_DESCRIBE_VERSION})  
  string(REGEX REPLACE "^v" "" GITVERSIONDETECT_VERSION "${GIT_DESCRIBE_VERSION}")
else()
  execute_process(
    COMMAND ${GIT_EXECUTABLE} describe --abbrev=8 --dirty --always --tags
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    OUTPUT_VARIABLE GIT_DESCRIBE_PROJECT_VERSION_ASIS
    OUTPUT_STRIP_TRAILING_WHITESPACE
    ERROR_QUIET
  )
endif()
# endif()

if(NOT DEFINED GITVERSIONDETECT_VERSION)
  set(GITVERSIONDETECT_VERSION 0.0.0-0-unknown)
  message(WARNING "Failed to determine GITVERSIONDETECT_VERSION from Git tags. Using default version \"${GITVERSIONDETECT_VERSION}\".")
endif()

# Split the version into major, minor, patch and prerelease
string(REGEX MATCH "^([0-9]+)\\.([0-9]+)\\.([0-9]+)(-([0-9]+)-([a-z0-9]+))?" GITVERSIONDETECT_VERSION_MATCH ${GITVERSIONDETECT_VERSION})
set(GITVERSIONDETECT_VERSION_MAJOR ${CMAKE_MATCH_1})
set(GITVERSIONDETECT_VERSION_MINOR ${CMAKE_MATCH_2})
set(GITVERSIONDETECT_VERSION_PATCH ${CMAKE_MATCH_3})
set(GITVERSIONDETECT_VERSION_COMMIT_NUM ${CMAKE_MATCH_5})
set(GITVERSIONDETECT_VERSION_COMMIT_SHA ${CMAKE_MATCH_6})